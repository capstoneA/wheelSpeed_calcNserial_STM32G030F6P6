
Capstone_wheel_speed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ce8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001da0  08001da0  00002da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001de0  08001de0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001de0  08001de0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001de0  08001de0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de0  08001de0  00002de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001de4  08001de4  00002de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001de8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001df4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001df4  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088b8  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001778  00000000  00000000  0000b8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0000d068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000808  00000000  00000000  0000dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d6c  00000000  00000000  0000e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b06c  00000000  00000000  0002203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000807ee  00000000  00000000  0002d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad896  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002514  00000000  00000000  000ad8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000afdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001d88 	.word	0x08001d88

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001d88 	.word	0x08001d88

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <ledDebug>:
#define FRQ 1

unsigned int led_check = 0;
unsigned char speed = 0;

void ledDebug(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	led_check^=1;
 800021c:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <ledDebug+0x34>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2201      	movs	r2, #1
 8000222:	405a      	eors	r2, r3
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <ledDebug+0x34>)
 8000226:	601a      	str	r2, [r3, #0]
	if(led_check){
 8000228:	4b08      	ldr	r3, [pc, #32]	@ (800024c <ledDebug+0x34>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d003      	beq.n	8000238 <ledDebug+0x20>
		PCVUIP(0x50000018) = 0x01<<(16+4);
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <ledDebug+0x38>)
 8000232:	2280      	movs	r2, #128	@ 0x80
 8000234:	0352      	lsls	r2, r2, #13
 8000236:	601a      	str	r2, [r3, #0]
	}
	if(!led_check){
 8000238:	4b04      	ldr	r3, [pc, #16]	@ (800024c <ledDebug+0x34>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d102      	bne.n	8000246 <ledDebug+0x2e>
		PCVUIP(0x50000018) = 0x01<<(4);
 8000240:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <ledDebug+0x38>)
 8000242:	2210      	movs	r2, #16
 8000244:	601a      	str	r2, [r3, #0]
	}
}
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000074 	.word	0x20000074
 8000250:	50000018 	.word	0x50000018

08000254 <PA4debugLEDsetting>:
	queue_rear++;
	if(queue_rear == 20)queue_rear = 0;
	return;
}

void PA4debugLEDsetting(){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	PCVUIP(0x40021034) |=  (0x01)<<0;			//PA Clock Enable
 8000258:	4b13      	ldr	r3, [pc, #76]	@ (80002a8 <PA4debugLEDsetting+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <PA4debugLEDsetting+0x54>)
 800025e:	2101      	movs	r1, #1
 8000260:	430a      	orrs	r2, r1
 8000262:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000000) |=  (0x01)<<(4*2);	//MODER
 8000264:	23a0      	movs	r3, #160	@ 0xa0
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	23a0      	movs	r3, #160	@ 0xa0
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2180      	movs	r1, #128	@ 0x80
 8000270:	0049      	lsls	r1, r1, #1
 8000272:	430a      	orrs	r2, r1
 8000274:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000000) &= ~(0x02)<<(4*2);	//MODER
 8000276:	23a0      	movs	r3, #160	@ 0xa0
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	23a0      	movs	r3, #160	@ 0xa0
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	490a      	ldr	r1, [pc, #40]	@ (80002ac <PA4debugLEDsetting+0x58>)
 8000282:	400a      	ands	r2, r1
 8000284:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000008) |=  (0x03)<<(4*2);	//speed - very fast
 8000286:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <PA4debugLEDsetting+0x5c>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <PA4debugLEDsetting+0x5c>)
 800028c:	21c0      	movs	r1, #192	@ 0xc0
 800028e:	0089      	lsls	r1, r1, #2
 8000290:	430a      	orrs	r2, r1
 8000292:	601a      	str	r2, [r3, #0]
	PCVUIP(0x5000000C) &= ~(0x03)<<(4*2);	//pupd - not
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <PA4debugLEDsetting+0x60>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <PA4debugLEDsetting+0x60>)
 800029a:	0a92      	lsrs	r2, r2, #10
 800029c:	0292      	lsls	r2, r2, #10
 800029e:	601a      	str	r2, [r3, #0]
}
 80002a0:	46c0      	nop			@ (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			@ (mov r8, r8)
 80002a8:	40021034 	.word	0x40021034
 80002ac:	fffffd00 	.word	0xfffffd00
 80002b0:	50000008 	.word	0x50000008
 80002b4:	5000000c 	.word	0x5000000c

080002b8 <timer1setting>:

void timer1setting(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	PCVUIP(0x40021040) |=  (0x01<<11);	//RCC
 80002bc:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <timer1setting+0x50>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <timer1setting+0x50>)
 80002c2:	2180      	movs	r1, #128	@ 0x80
 80002c4:	0109      	lsls	r1, r1, #4
 80002c6:	430a      	orrs	r2, r1
 80002c8:	601a      	str	r2, [r3, #0]

	PCVUIP(0x40012C0C) |=  (0x01<<0);	//DIER->UIE
 80002ca:	4b10      	ldr	r3, [pc, #64]	@ (800030c <timer1setting+0x54>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <timer1setting+0x54>)
 80002d0:	2101      	movs	r1, #1
 80002d2:	430a      	orrs	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
	PCVUIP(0x40012C10) &= ~(0x01<<0);	//SR - UIF
 80002d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <timer1setting+0x58>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b0d      	ldr	r3, [pc, #52]	@ (8000310 <timer1setting+0x58>)
 80002dc:	2101      	movs	r1, #1
 80002de:	438a      	bics	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]

//	PCVUIP(0x40012C24);	//CNT
	PCVUIP(0x40012C28)  = 63;	//Prescaler
 80002e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <timer1setting+0x5c>)
 80002e4:	223f      	movs	r2, #63	@ 0x3f
 80002e6:	601a      	str	r2, [r3, #0]
//	PCVUIP(0x40012C2C);	//ARR

	PCVUIP(0x40012C00) |= 0x01<<0;	//counter enable
 80002e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <timer1setting+0x60>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <timer1setting+0x60>)
 80002ee:	2101      	movs	r1, #1
 80002f0:	430a      	orrs	r2, r1
 80002f2:	601a      	str	r2, [r3, #0]

	PCVUIP(0xE000E100) |= 0x01<<13;	//NVIC enable
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <timer1setting+0x64>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b08      	ldr	r3, [pc, #32]	@ (800031c <timer1setting+0x64>)
 80002fa:	2180      	movs	r1, #128	@ 0x80
 80002fc:	0189      	lsls	r1, r1, #6
 80002fe:	430a      	orrs	r2, r1
 8000300:	601a      	str	r2, [r3, #0]
}
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40021040 	.word	0x40021040
 800030c:	40012c0c 	.word	0x40012c0c
 8000310:	40012c10 	.word	0x40012c10
 8000314:	40012c28 	.word	0x40012c28
 8000318:	40012c00 	.word	0x40012c00
 800031c:	e000e100 	.word	0xe000e100

08000320 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

void TIM1_BRK_UP_TRG_COM_IRQHandler(){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	if(PCVUIP(0x40012C10) & (0x01<<0)){
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2201      	movs	r2, #1
 800032a:	4013      	ands	r3, r2
 800032c:	d00a      	beq.n	8000344 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>
		PCVUIP(0x40012C10) &= ~(0x01<<0);	//SR - UIF
 800032e:	4b07      	ldr	r3, [pc, #28]	@ (800034c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
 8000334:	2101      	movs	r1, #1
 8000336:	438a      	bics	r2, r1
 8000338:	601a      	str	r2, [r3, #0]

		speed = 0;
 800033a:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
//		PCVUIP(0x40013828) = speed;

		ledDebug();
 8000340:	f7ff ff6a 	bl	8000218 <ledDebug>
	}
}
 8000344:	46c0      	nop			@ (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	40012c10 	.word	0x40012c10
 8000350:	20000078 	.word	0x20000078

08000354 <timer3setting>:

void timer3setting(){
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	PCVUIP(0x4002103C) |= (0x01<<1);
 8000358:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <timer3setting+0x54>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <timer3setting+0x54>)
 800035e:	2102      	movs	r1, #2
 8000360:	430a      	orrs	r2, r1
 8000362:	601a      	str	r2, [r3, #0]

	PCVUIP(0x4000040C) |=  (0x01)<<0;	//DIER->UIE
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <timer3setting+0x58>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <timer3setting+0x58>)
 800036a:	2101      	movs	r1, #1
 800036c:	430a      	orrs	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
	PCVUIP(0x40000410) &= ~(0x01<<0);	//SR - UIF
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <timer3setting+0x5c>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <timer3setting+0x5c>)
 8000376:	2101      	movs	r1, #1
 8000378:	438a      	bics	r2, r1
 800037a:	601a      	str	r2, [r3, #0]

	PCVUIP(0x40000428) = (1000 - 1);	//prescaler
 800037c:	4b0d      	ldr	r3, [pc, #52]	@ (80003b4 <timer3setting+0x60>)
 800037e:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <timer3setting+0x64>)
 8000380:	601a      	str	r2, [r3, #0]
	PCVUIP(0x4000042C) = (16000/FRQ - 1);	//Auto reload
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <timer3setting+0x68>)
 8000384:	4a0e      	ldr	r2, [pc, #56]	@ (80003c0 <timer3setting+0x6c>)
 8000386:	601a      	str	r2, [r3, #0]

	PCVUIP(0x40000400) |= (0x01)<<0;	//counter enable
 8000388:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <timer3setting+0x70>)
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <timer3setting+0x70>)
 800038e:	2101      	movs	r1, #1
 8000390:	430a      	orrs	r2, r1
 8000392:	601a      	str	r2, [r3, #0]

	PCVUIP(0xE000E100) |= 0x01<<16;	//NVIC enable
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <timer3setting+0x74>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <timer3setting+0x74>)
 800039a:	2180      	movs	r1, #128	@ 0x80
 800039c:	0249      	lsls	r1, r1, #9
 800039e:	430a      	orrs	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	4002103c 	.word	0x4002103c
 80003ac:	4000040c 	.word	0x4000040c
 80003b0:	40000410 	.word	0x40000410
 80003b4:	40000428 	.word	0x40000428
 80003b8:	000003e7 	.word	0x000003e7
 80003bc:	4000042c 	.word	0x4000042c
 80003c0:	00003e7f 	.word	0x00003e7f
 80003c4:	40000400 	.word	0x40000400
 80003c8:	e000e100 	.word	0xe000e100

080003cc <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	if(PCVUIP(0x40000410) & (0x01<<0)){
 80003d0:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <TIM3_IRQHandler+0x28>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2201      	movs	r2, #1
 80003d6:	4013      	ands	r3, r2
 80003d8:	d009      	beq.n	80003ee <TIM3_IRQHandler+0x22>
		PCVUIP(0x40000410) &= ~(0x01<<0);
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <TIM3_IRQHandler+0x28>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <TIM3_IRQHandler+0x28>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	438a      	bics	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]

		PCVUIP(0x40013828) = speed;
 80003e6:	4b04      	ldr	r3, [pc, #16]	@ (80003f8 <TIM3_IRQHandler+0x2c>)
 80003e8:	781a      	ldrb	r2, [r3, #0]
 80003ea:	4b04      	ldr	r3, [pc, #16]	@ (80003fc <TIM3_IRQHandler+0x30>)
 80003ec:	601a      	str	r2, [r3, #0]
	}
}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40000410 	.word	0x40000410
 80003f8:	20000078 	.word	0x20000078
 80003fc:	40013828 	.word	0x40013828

08000400 <PA8inputSetting>:

void PA8inputSetting(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	PCVUIP(0x40021034) |=  (0x01<<0);			//clock enable
 8000404:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <PA8inputSetting+0x40>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <PA8inputSetting+0x40>)
 800040a:	2101      	movs	r1, #1
 800040c:	430a      	orrs	r2, r1
 800040e:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000000) &= ~(0x03<<(8*2));	//input
 8000410:	23a0      	movs	r3, #160	@ 0xa0
 8000412:	05db      	lsls	r3, r3, #23
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	23a0      	movs	r3, #160	@ 0xa0
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	490a      	ldr	r1, [pc, #40]	@ (8000444 <PA8inputSetting+0x44>)
 800041c:	400a      	ands	r2, r1
 800041e:	601a      	str	r2, [r3, #0]
	PCVUIP(0x5000000C) &= ~(0x03<<(8*2));	//pupd - not
 8000420:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <PA8inputSetting+0x48>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <PA8inputSetting+0x48>)
 8000426:	4907      	ldr	r1, [pc, #28]	@ (8000444 <PA8inputSetting+0x44>)
 8000428:	400a      	ands	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000008) |=  (0x03<<(8*2));		//speed very fast
 800042c:	4b07      	ldr	r3, [pc, #28]	@ (800044c <PA8inputSetting+0x4c>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <PA8inputSetting+0x4c>)
 8000432:	21c0      	movs	r1, #192	@ 0xc0
 8000434:	0289      	lsls	r1, r1, #10
 8000436:	430a      	orrs	r2, r1
 8000438:	601a      	str	r2, [r3, #0]
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021034 	.word	0x40021034
 8000444:	fffcffff 	.word	0xfffcffff
 8000448:	5000000c 	.word	0x5000000c
 800044c:	50000008 	.word	0x50000008

08000450 <EXTI8setting>:

void EXTI8setting(){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	PCVUIP(0x40021800) |=   0x01<<8;	//rising edge trigger
 8000454:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <EXTI8setting+0x40>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b0d      	ldr	r3, [pc, #52]	@ (8000490 <EXTI8setting+0x40>)
 800045a:	2180      	movs	r1, #128	@ 0x80
 800045c:	0049      	lsls	r1, r1, #1
 800045e:	430a      	orrs	r2, r1
 8000460:	601a      	str	r2, [r3, #0]
	PCVUIP(0x40021868) &= ~(0xF<<0);	//use PA8
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <EXTI8setting+0x44>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <EXTI8setting+0x44>)
 8000468:	210f      	movs	r1, #15
 800046a:	438a      	bics	r2, r1
 800046c:	601a      	str	r2, [r3, #0]

	PCVUIP(0x40021880) |=  0x01<<8;	//IMR
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <EXTI8setting+0x48>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <EXTI8setting+0x48>)
 8000474:	2180      	movs	r1, #128	@ 0x80
 8000476:	0049      	lsls	r1, r1, #1
 8000478:	430a      	orrs	r2, r1
 800047a:	601a      	str	r2, [r3, #0]

	PCVUIP(0xE000E100) |=  0x01<<7;	//EXTI set enable reg
 800047c:	4b07      	ldr	r3, [pc, #28]	@ (800049c <EXTI8setting+0x4c>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <EXTI8setting+0x4c>)
 8000482:	2180      	movs	r1, #128	@ 0x80
 8000484:	430a      	orrs	r2, r1
 8000486:	601a      	str	r2, [r3, #0]
}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	40021800 	.word	0x40021800
 8000494:	40021868 	.word	0x40021868
 8000498:	40021880 	.word	0x40021880
 800049c:	e000e100 	.word	0xe000e100

080004a0 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
	if(PCVUIP(0x4002180C) & (0x01<<8)){
 80004a6:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <EXTI4_15_IRQHandler+0x4c>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	2380      	movs	r3, #128	@ 0x80
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4013      	ands	r3, r2
 80004b0:	d018      	beq.n	80004e4 <EXTI4_15_IRQHandler+0x44>

//		enqueue(PCVUIP(0x40012C24));
//		PCVUIP(0x40012C24) = 0x00;

		PCVUIP(0x4002180C) |= 0x01<<8;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <EXTI4_15_IRQHandler+0x4c>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <EXTI4_15_IRQHandler+0x4c>)
 80004b8:	2180      	movs	r1, #128	@ 0x80
 80004ba:	0049      	lsls	r1, r1, #1
 80004bc:	430a      	orrs	r2, r1
 80004be:	601a      	str	r2, [r3, #0]

//		PCVUIP(0x40013828) = 97;

		unsigned int cnt = PCVUIP(0x40012C24) & 0xFFFF;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <EXTI4_15_IRQHandler+0x50>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	041b      	lsls	r3, r3, #16
 80004c6:	0c1b      	lsrs	r3, r3, #16
 80004c8:	607b      	str	r3, [r7, #4]
		PCVUIP(0x40012C24) = 0x00;
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <EXTI4_15_IRQHandler+0x50>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
		speed = (unsigned char)(762500/cnt);
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	4808      	ldr	r0, [pc, #32]	@ (80004f4 <EXTI4_15_IRQHandler+0x54>)
 80004d4:	f7ff fe14 	bl	8000100 <__udivsi3>
 80004d8:	0003      	movs	r3, r0
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <EXTI4_15_IRQHandler+0x58>)
 80004de:	701a      	strb	r2, [r3, #0]
//		if(speed){
//				//speed update when last speed is not 0
//			PCVUIP(0x40013828) = speed;
//		}

		ledDebug();
 80004e0:	f7ff fe9a 	bl	8000218 <ledDebug>
	}
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b002      	add	sp, #8
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	4002180c 	.word	0x4002180c
 80004f0:	40012c24 	.word	0x40012c24
 80004f4:	000ba284 	.word	0x000ba284
 80004f8:	20000078 	.word	0x20000078

080004fc <UART1Setting>:

void UART1Setting(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	PCVUIP(0x40021040) |=  0x01<<14;	//RCC uart1 enable
 8000500:	4b22      	ldr	r3, [pc, #136]	@ (800058c <UART1Setting+0x90>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b21      	ldr	r3, [pc, #132]	@ (800058c <UART1Setting+0x90>)
 8000506:	2180      	movs	r1, #128	@ 0x80
 8000508:	01c9      	lsls	r1, r1, #7
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
	PCVUIP(0x40021034) |=  0x01<<1;	//RCC GPIOB clock enable
 800050e:	4b20      	ldr	r3, [pc, #128]	@ (8000590 <UART1Setting+0x94>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b1f      	ldr	r3, [pc, #124]	@ (8000590 <UART1Setting+0x94>)
 8000514:	2102      	movs	r1, #2
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]

	PCVUIP(0x50000400) |=  (0x02<<(6*2));	//MODER
 800051a:	4b1e      	ldr	r3, [pc, #120]	@ (8000594 <UART1Setting+0x98>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b1d      	ldr	r3, [pc, #116]	@ (8000594 <UART1Setting+0x98>)
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	0189      	lsls	r1, r1, #6
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000400) &= ~(0x01<<(6*2));	//MODER
 8000528:	4b1a      	ldr	r3, [pc, #104]	@ (8000594 <UART1Setting+0x98>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b19      	ldr	r3, [pc, #100]	@ (8000594 <UART1Setting+0x98>)
 800052e:	491a      	ldr	r1, [pc, #104]	@ (8000598 <UART1Setting+0x9c>)
 8000530:	400a      	ands	r2, r1
 8000532:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000400) |=  (0x02<<(7*2));	//MODER
 8000534:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <UART1Setting+0x98>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <UART1Setting+0x98>)
 800053a:	2180      	movs	r1, #128	@ 0x80
 800053c:	0209      	lsls	r1, r1, #8
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000400) &= ~(0x01<<(7*2));	//MODER
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <UART1Setting+0x98>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <UART1Setting+0x98>)
 8000548:	4914      	ldr	r1, [pc, #80]	@ (800059c <UART1Setting+0xa0>)
 800054a:	400a      	ands	r2, r1
 800054c:	601a      	str	r2, [r3, #0]

	PCVUIP(0x50000420) &= ~(0x0F<<(7*4));	//AFRL
 800054e:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <UART1Setting+0xa4>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <UART1Setting+0xa4>)
 8000554:	0112      	lsls	r2, r2, #4
 8000556:	0912      	lsrs	r2, r2, #4
 8000558:	601a      	str	r2, [r3, #0]
	PCVUIP(0x50000420) &= ~(0x0F<<(6*4));	//AFRL
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <UART1Setting+0xa4>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <UART1Setting+0xa4>)
 8000560:	4910      	ldr	r1, [pc, #64]	@ (80005a4 <UART1Setting+0xa8>)
 8000562:	400a      	ands	r2, r1
 8000564:	601a      	str	r2, [r3, #0]

	PCVUIP(0x4001380C)  =  1667;	//baud rate : 16000000/9600
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <UART1Setting+0xac>)
 8000568:	4a10      	ldr	r2, [pc, #64]	@ (80005ac <UART1Setting+0xb0>)
 800056a:	601a      	str	r2, [r3, #0]
	PCVUIP(0x40013800) |=  0x01<<0;	//UART Enable
 800056c:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <UART1Setting+0xb4>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <UART1Setting+0xb4>)
 8000572:	2101      	movs	r1, #1
 8000574:	430a      	orrs	r2, r1
 8000576:	601a      	str	r2, [r3, #0]
	PCVUIP(0x40013800) |=  0x01<<3;	//UART Transmitter Enable
 8000578:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <UART1Setting+0xb4>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <UART1Setting+0xb4>)
 800057e:	2108      	movs	r1, #8
 8000580:	430a      	orrs	r2, r1
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	40021040 	.word	0x40021040
 8000590:	40021034 	.word	0x40021034
 8000594:	50000400 	.word	0x50000400
 8000598:	ffffefff 	.word	0xffffefff
 800059c:	ffffbfff 	.word	0xffffbfff
 80005a0:	50000420 	.word	0x50000420
 80005a4:	f0ffffff 	.word	0xf0ffffff
 80005a8:	4001380c 	.word	0x4001380c
 80005ac:	00000683 	.word	0x00000683
 80005b0:	40013800 	.word	0x40013800

080005b4 <main>:
/**
  * @brief  The application entry point.‹
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b8:	f000 f99c 	bl	80008f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005bc:	f000 f812 	bl	80005e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c0:	f000 f8b4 	bl	800072c <MX_GPIO_Init>
	MX_TIM1_Init();
 80005c4:	f000 f856 	bl	8000674 <MX_TIM1_Init>
	//762500
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	PA4debugLEDsetting();
 80005c8:	f7ff fe44 	bl	8000254 <PA4debugLEDsetting>
	PA8inputSetting();
 80005cc:	f7ff ff18 	bl	8000400 <PA8inputSetting>
	EXTI8setting();
 80005d0:	f7ff ff3e 	bl	8000450 <EXTI8setting>
	timer1setting();
 80005d4:	f7ff fe70 	bl	80002b8 <timer1setting>
	timer3setting();
 80005d8:	f7ff febc 	bl	8000354 <timer3setting>
	UART1Setting();
 80005dc:	f7ff ff8e 	bl	80004fc <UART1Setting>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	e7fd      	b.n	80005e0 <main+0x2c>

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b093      	sub	sp, #76	@ 0x4c
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	2414      	movs	r4, #20
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2334      	movs	r3, #52	@ 0x34
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f001 fb9b 	bl	8001d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2310      	movs	r3, #16
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f001 fb94 	bl	8001d30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	0018      	movs	r0, r3
 800060e:	f000 fc0f 	bl	8000e30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2202      	movs	r2, #2
 8000616:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	0052      	lsls	r2, r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2240      	movs	r2, #64	@ 0x40
 800062a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	193b      	adds	r3, r7, r4
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fc3b 	bl	8000eb0 <HAL_RCC_OscConfig>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800063e:	f000 f8c7 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2207      	movs	r2, #7
 8000646:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 ff36 	bl	80014d0 <HAL_RCC_ClockConfig>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000668:	f000 f8b2 	bl	80007d0 <Error_Handler>
  }
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b013      	add	sp, #76	@ 0x4c
 8000672:	bd90      	pop	{r4, r7, pc}

08000674 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	2310      	movs	r3, #16
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2310      	movs	r3, #16
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f001 fb53 	bl	8001d30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	230c      	movs	r3, #12
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f001 fb4c 	bl	8001d30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000698:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_TIM1_Init+0xac>)
 800069a:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <MX_TIM1_Init+0xb0>)
 800069c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800069e:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <MX_TIM1_Init+0xac>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_TIM1_Init+0xac>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <MX_TIM1_Init+0xac>)
 80006ac:	4a1e      	ldr	r2, [pc, #120]	@ (8000728 <MX_TIM1_Init+0xb4>)
 80006ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_TIM1_Init+0xac>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_TIM1_Init+0xac>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_TIM1_Init+0xac>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_TIM1_Init+0xac>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 f88d 	bl	80017e4 <HAL_TIM_Base_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80006ce:	f000 f87f 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	2110      	movs	r1, #16
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2280      	movs	r2, #128	@ 0x80
 80006d8:	0152      	lsls	r2, r2, #5
 80006da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006dc:	187a      	adds	r2, r7, r1
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_TIM1_Init+0xac>)
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 f8d6 	bl	8001894 <HAL_TIM_ConfigClockSource>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006ec:	f000 f870 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000702:	1d3a      	adds	r2, r7, #4
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_TIM1_Init+0xac>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 faaf 	bl	8001c6c <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000712:	f000 f85d 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b008      	add	sp, #32
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000028 	.word	0x20000028
 8000724:	40012c00 	.word	0x40012c00
 8000728:	0000ffff 	.word	0x0000ffff

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b089      	sub	sp, #36	@ 0x24
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	240c      	movs	r4, #12
 8000734:	193b      	adds	r3, r7, r4
 8000736:	0018      	movs	r0, r3
 8000738:	2314      	movs	r3, #20
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f001 faf7 	bl	8001d30 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_GPIO_Init+0x98>)
 8000744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_GPIO_Init+0x98>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	635a      	str	r2, [r3, #52]	@ 0x34
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_GPIO_Init+0x98>)
 8000750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_GPIO_Init+0x98>)
 800075c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_GPIO_Init+0x98>)
 8000760:	2101      	movs	r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_GPIO_Init+0x98>)
 8000768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076a:	2201      	movs	r2, #1
 800076c:	4013      	ands	r3, r2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB7 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000772:	0021      	movs	r1, r4
 8000774:	187b      	adds	r3, r7, r1
 8000776:	22c0      	movs	r2, #192	@ 0xc0
 8000778:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2202      	movs	r2, #2
 800077e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2203      	movs	r2, #3
 800078a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	187b      	adds	r3, r7, r1
 8000794:	4a0c      	ldr	r2, [pc, #48]	@ (80007c8 <MX_GPIO_Init+0x9c>)
 8000796:	0019      	movs	r1, r3
 8000798:	0010      	movs	r0, r2
 800079a:	f000 f9e5 	bl	8000b68 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_GPIO_Init+0xa0>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_GPIO_Init+0xa0>)
 80007a4:	2180      	movs	r1, #128	@ 0x80
 80007a6:	0289      	lsls	r1, r1, #10
 80007a8:	430a      	orrs	r2, r1
 80007aa:	601a      	str	r2, [r3, #0]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_GPIO_Init+0xa0>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_GPIO_Init+0xa0>)
 80007b2:	2180      	movs	r1, #128	@ 0x80
 80007b4:	0249      	lsls	r1, r1, #9
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b009      	add	sp, #36	@ 0x24
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	40021000 	.word	0x40021000
 80007c8:	50000400 	.word	0x50000400
 80007cc:	40010000 	.word	0x40010000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <HAL_MspInit+0x44>)
 80007e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <HAL_MspInit+0x44>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	430a      	orrs	r2, r1
 80007ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <HAL_MspInit+0x44>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	2201      	movs	r2, #1
 80007f4:	4013      	ands	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_MspInit+0x44>)
 80007fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <HAL_MspInit+0x44>)
 8000800:	2180      	movs	r1, #128	@ 0x80
 8000802:	0549      	lsls	r1, r1, #21
 8000804:	430a      	orrs	r2, r1
 8000806:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <HAL_MspInit+0x44>)
 800080a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	055b      	lsls	r3, r3, #21
 8000810:	4013      	ands	r3, r2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <HAL_TIM_Base_MspInit+0x38>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10d      	bne.n	8000852 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 8000838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	0109      	lsls	r1, r1, #4
 8000840:	430a      	orrs	r2, r1
 8000842:	641a      	str	r2, [r3, #64]	@ 0x40
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 8000846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	4013      	ands	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	40012c00 	.word	0x40012c00
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f89c 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a4:	f7ff fff7 	bl	8000896 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	@ (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	@ (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ce:	f001 fa37 	bl	8001d40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008d2:	f7ff fe6f 	bl	80005b4 <main>

080008d6 <LoopForever>:

LoopForever:
  b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e4:	08001de8 	.word	0x08001de8
  ldr r2, =_sbss
 80008e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ec:	20000080 	.word	0x20000080

080008f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <HAL_Init+0x3c>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_Init+0x3c>)
 8000906:	2180      	movs	r1, #128	@ 0x80
 8000908:	0049      	lsls	r1, r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090e:	2003      	movs	r0, #3
 8000910:	f000 f810 	bl	8000934 <HAL_InitTick>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d003      	beq.n	8000920 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	e001      	b.n	8000924 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff ff5c 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800093c:	230f      	movs	r3, #15
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <HAL_InitTick+0x88>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d02b      	beq.n	80009a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <HAL_InitTick+0x8c>)
 800094e:	681c      	ldr	r4, [r3, #0]
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <HAL_InitTick+0x88>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0019      	movs	r1, r3
 8000956:	23fa      	movs	r3, #250	@ 0xfa
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	f7ff fbd1 	bl	8000100 <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0019      	movs	r1, r3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff fbcc 	bl	8000100 <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f8ef 	bl	8000b4e <HAL_SYSTICK_Config>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d112      	bne.n	800099a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d80a      	bhi.n	8000990 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	2301      	movs	r3, #1
 800097e:	425b      	negs	r3, r3
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f000 f8ce 	bl	8000b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HAL_InitTick+0x90>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	e00d      	b.n	80009ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000990:	230f      	movs	r3, #15
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e008      	b.n	80009ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	230f      	movs	r3, #15
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e003      	b.n	80009ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a4:	230f      	movs	r3, #15
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009ac:	230f      	movs	r3, #15
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	781b      	ldrb	r3, [r3, #0]
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b005      	add	sp, #20
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	001a      	movs	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	18d2      	adds	r2, r2, r3
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <HAL_IncTick+0x20>)
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	20000008 	.word	0x20000008
 80009e8:	2000007c 	.word	0x2000007c

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	@ (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	2000007c 	.word	0x2000007c

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a14:	d828      	bhi.n	8000a68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	33c0      	adds	r3, #192	@ 0xc0
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	589b      	ldr	r3, [r3, r2]
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	400a      	ands	r2, r1
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	21ff      	movs	r1, #255	@ 0xff
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	22ff      	movs	r2, #255	@ 0xff
 8000a44:	401a      	ands	r2, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4003      	ands	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	481f      	ldr	r0, [pc, #124]	@ (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	33c0      	adds	r3, #192	@ 0xc0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a66:	e031      	b.n	8000acc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0019      	movs	r1, r3
 8000a70:	230f      	movs	r3, #15
 8000a72:	400b      	ands	r3, r1
 8000a74:	3b08      	subs	r3, #8
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3306      	adds	r3, #6
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	3304      	adds	r3, #4
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1dfa      	adds	r2, r7, #7
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	0011      	movs	r1, r2
 8000a88:	2203      	movs	r2, #3
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	21ff      	movs	r1, #255	@ 0xff
 8000a90:	4091      	lsls	r1, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	401a      	ands	r2, r3
 8000a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	22ff      	movs	r2, #255	@ 0xff
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	4003      	ands	r3, r0
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	3b08      	subs	r3, #8
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	18c3      	adds	r3, r0, r3
 8000ac8:	3304      	adds	r3, #4
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	045b      	lsls	r3, r3, #17
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d301      	bcc.n	8000af4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af0:	2301      	movs	r3, #1
 8000af2:	e010      	b.n	8000b16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <SysTick_Config+0x44>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	3a01      	subs	r2, #1
 8000afa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	2103      	movs	r1, #3
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff7c 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <SysTick_Config+0x44>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <SysTick_Config+0x44>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	210f      	movs	r1, #15
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	1c02      	adds	r2, r0, #0
 8000b34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ffbf 	bl	8000adc <SysTick_Config>
 8000b5e:	0003      	movs	r3, r0
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e147      	b.n	8000e08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <HAL_GPIO_Init+0x28>
 8000b8e:	e138      	b.n	8000e02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d005      	beq.n	8000ba8 <HAL_GPIO_Init+0x40>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d130      	bne.n	8000c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d017      	beq.n	8000c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	58d3      	ldr	r3, [r2, r3]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2207      	movs	r2, #7
 8000c64:	4013      	ands	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	400b      	ands	r3, r1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	6939      	ldr	r1, [r7, #16]
 8000c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	23c0      	movs	r3, #192	@ 0xc0
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d100      	bne.n	8000cdc <HAL_GPIO_Init+0x174>
 8000cda:	e092      	b.n	8000e02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000cdc:	4a50      	ldr	r2, [pc, #320]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3318      	adds	r3, #24
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	589b      	ldr	r3, [r3, r2]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	2203      	movs	r2, #3
 8000cee:	4013      	ands	r3, r2
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	23a0      	movs	r3, #160	@ 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x1ca>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a45      	ldr	r2, [pc, #276]	@ (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x1c6>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a44      	ldr	r2, [pc, #272]	@ (8000e28 <HAL_GPIO_Init+0x2c0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x1c2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a43      	ldr	r2, [pc, #268]	@ (8000e2c <HAL_GPIO_Init+0x2c4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x1be>
 8000d22:	2303      	movs	r3, #3
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d26:	2305      	movs	r3, #5
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d32:	2300      	movs	r3, #0
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	2103      	movs	r1, #3
 8000d38:	400a      	ands	r2, r1
 8000d3a:	00d2      	lsls	r2, r2, #3
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d44:	4936      	ldr	r1, [pc, #216]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d52:	4b33      	ldr	r3, [pc, #204]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	035b      	lsls	r3, r3, #13
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43da      	mvns	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	039b      	lsls	r3, r3, #14
 8000d94:	4013      	ands	r3, r2
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000da6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000da8:	2384      	movs	r3, #132	@ 0x84
 8000daa:	58d3      	ldr	r3, [r2, r3]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43da      	mvns	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	029b      	lsls	r3, r3, #10
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dcc:	4914      	ldr	r1, [pc, #80]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dce:	2284      	movs	r2, #132	@ 0x84
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000dd4:	4a12      	ldr	r2, [pc, #72]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	58d3      	ldr	r3, [r2, r3]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	4013      	ands	r3, r2
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dfa:	4909      	ldr	r1, [pc, #36]	@ (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	40da      	lsrs	r2, r3
 8000e10:	1e13      	subs	r3, r2, #0
 8000e12:	d000      	beq.n	8000e16 <HAL_GPIO_Init+0x2ae>
 8000e14:	e6b0      	b.n	8000b78 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b006      	add	sp, #24
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021800 	.word	0x40021800
 8000e24:	50000400 	.word	0x50000400
 8000e28:	50000800 	.word	0x50000800
 8000e2c:	50000c00 	.word	0x50000c00

08000e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ea4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	0019      	movs	r1, r3
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d11f      	bne.n	8000e94 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	0013      	movs	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	189b      	adds	r3, r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4912      	ldr	r1, [pc, #72]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff f94c 	bl	8000100 <__udivsi3>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e6e:	e008      	b.n	8000e82 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e001      	b.n	8000e82 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e009      	b.n	8000e96 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	2380      	movs	r3, #128	@ 0x80
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d0ed      	beq.n	8000e70 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b004      	add	sp, #16
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	40007000 	.word	0x40007000
 8000ea4:	fffff9ff 	.word	0xfffff9ff
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	000f4240 	.word	0x000f4240

08000eb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e2f3      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d100      	bne.n	8000ece <HAL_RCC_OscConfig+0x1e>
 8000ecc:	e07c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ece:	4bc3      	ldr	r3, [pc, #780]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2238      	movs	r2, #56	@ 0x38
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ed8:	4bc0      	ldr	r3, [pc, #768]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	2b10      	cmp	r3, #16
 8000ee6:	d102      	bne.n	8000eee <HAL_RCC_OscConfig+0x3e>
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d002      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d10b      	bne.n	8000f0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef4:	4bb9      	ldr	r3, [pc, #740]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	4013      	ands	r3, r2
 8000efe:	d062      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x116>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d15e      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e2ce      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	025b      	lsls	r3, r3, #9
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d107      	bne.n	8000f28 <HAL_RCC_OscConfig+0x78>
 8000f18:	4bb0      	ldr	r3, [pc, #704]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4baf      	ldr	r3, [pc, #700]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	2180      	movs	r1, #128	@ 0x80
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	430a      	orrs	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e020      	b.n	8000f6a <HAL_RCC_OscConfig+0xba>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	23a0      	movs	r3, #160	@ 0xa0
 8000f2e:	02db      	lsls	r3, r3, #11
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d10e      	bne.n	8000f52 <HAL_RCC_OscConfig+0xa2>
 8000f34:	4ba9      	ldr	r3, [pc, #676]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4ba8      	ldr	r3, [pc, #672]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	2180      	movs	r1, #128	@ 0x80
 8000f3c:	02c9      	lsls	r1, r1, #11
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	4ba6      	ldr	r3, [pc, #664]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4ba5      	ldr	r3, [pc, #660]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f48:	2180      	movs	r1, #128	@ 0x80
 8000f4a:	0249      	lsls	r1, r1, #9
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e00b      	b.n	8000f6a <HAL_RCC_OscConfig+0xba>
 8000f52:	4ba2      	ldr	r3, [pc, #648]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4ba1      	ldr	r3, [pc, #644]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f58:	49a1      	ldr	r1, [pc, #644]	@ (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b9f      	ldr	r3, [pc, #636]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b9e      	ldr	r3, [pc, #632]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f64:	499f      	ldr	r1, [pc, #636]	@ (80011e4 <HAL_RCC_OscConfig+0x334>)
 8000f66:	400a      	ands	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d014      	beq.n	8000f9c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f72:	f7ff fd3b 	bl	80009ec <HAL_GetTick>
 8000f76:	0003      	movs	r3, r0
 8000f78:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fd36 	bl	80009ec <HAL_GetTick>
 8000f80:	0002      	movs	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	@ 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e28d      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8e:	4b93      	ldr	r3, [pc, #588]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	029b      	lsls	r3, r3, #10
 8000f96:	4013      	ands	r3, r2
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0xcc>
 8000f9a:	e015      	b.n	8000fc8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd26 	bl	80009ec <HAL_GetTick>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa6:	f7ff fd21 	bl	80009ec <HAL_GetTick>
 8000faa:	0002      	movs	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b64      	cmp	r3, #100	@ 0x64
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e278      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fb8:	4b88      	ldr	r3, [pc, #544]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d1f0      	bne.n	8000fa6 <HAL_RCC_OscConfig+0xf6>
 8000fc4:	e000      	b.n	8000fc8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x124>
 8000fd2:	e099      	b.n	8001108 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fd4:	4b81      	ldr	r3, [pc, #516]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2238      	movs	r2, #56	@ 0x38
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fde:	4b7f      	ldr	r3, [pc, #508]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2b10      	cmp	r3, #16
 8000fec:	d102      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x144>
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d002      	beq.n	8000ffa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d135      	bne.n	8001066 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ffa:	4b78      	ldr	r3, [pc, #480]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4013      	ands	r3, r2
 8001004:	d005      	beq.n	8001012 <HAL_RCC_OscConfig+0x162>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e24b      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001012:	4b72      	ldr	r3, [pc, #456]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a74      	ldr	r2, [pc, #464]	@ (80011e8 <HAL_RCC_OscConfig+0x338>)
 8001018:	4013      	ands	r3, r2
 800101a:	0019      	movs	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	021a      	lsls	r2, r3, #8
 8001022:	4b6e      	ldr	r3, [pc, #440]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001024:	430a      	orrs	r2, r1
 8001026:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d112      	bne.n	8001054 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800102e:	4b6b      	ldr	r3, [pc, #428]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a6e      	ldr	r2, [pc, #440]	@ (80011ec <HAL_RCC_OscConfig+0x33c>)
 8001034:	4013      	ands	r3, r2
 8001036:	0019      	movs	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	4b67      	ldr	r3, [pc, #412]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001042:	4b66      	ldr	r3, [pc, #408]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	0adb      	lsrs	r3, r3, #11
 8001048:	2207      	movs	r2, #7
 800104a:	4013      	ands	r3, r2
 800104c:	4a68      	ldr	r2, [pc, #416]	@ (80011f0 <HAL_RCC_OscConfig+0x340>)
 800104e:	40da      	lsrs	r2, r3
 8001050:	4b68      	ldr	r3, [pc, #416]	@ (80011f4 <HAL_RCC_OscConfig+0x344>)
 8001052:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001054:	4b68      	ldr	r3, [pc, #416]	@ (80011f8 <HAL_RCC_OscConfig+0x348>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fc6b 	bl	8000934 <HAL_InitTick>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d051      	beq.n	8001106 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e221      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d030      	beq.n	80010d0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800106e:	4b5b      	ldr	r3, [pc, #364]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a5e      	ldr	r2, [pc, #376]	@ (80011ec <HAL_RCC_OscConfig+0x33c>)
 8001074:	4013      	ands	r3, r2
 8001076:	0019      	movs	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001082:	4b56      	ldr	r3, [pc, #344]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b55      	ldr	r3, [pc, #340]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	0049      	lsls	r1, r1, #1
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff fcac 	bl	80009ec <HAL_GetTick>
 8001094:	0003      	movs	r3, r0
 8001096:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff fca7 	bl	80009ec <HAL_GetTick>
 800109e:	0002      	movs	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e1fe      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ac:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4013      	ands	r3, r2
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a4a      	ldr	r2, [pc, #296]	@ (80011e8 <HAL_RCC_OscConfig+0x338>)
 80010be:	4013      	ands	r3, r2
 80010c0:	0019      	movs	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	021a      	lsls	r2, r3, #8
 80010c8:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 80010ca:	430a      	orrs	r2, r1
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	e01b      	b.n	8001108 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80010d0:	4b42      	ldr	r3, [pc, #264]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b41      	ldr	r3, [pc, #260]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 80010d6:	4949      	ldr	r1, [pc, #292]	@ (80011fc <HAL_RCC_OscConfig+0x34c>)
 80010d8:	400a      	ands	r2, r1
 80010da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fc86 	bl	80009ec <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e6:	f7ff fc81 	bl	80009ec <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1d8      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f8:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4013      	ands	r3, r2
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_OscConfig+0x236>
 8001104:	e000      	b.n	8001108 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001106:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2208      	movs	r2, #8
 800110e:	4013      	ands	r3, r2
 8001110:	d047      	beq.n	80011a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001112:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2238      	movs	r2, #56	@ 0x38
 8001118:	4013      	ands	r3, r2
 800111a:	2b18      	cmp	r3, #24
 800111c:	d10a      	bne.n	8001134 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d03c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x2f2>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d138      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e1ba      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d019      	beq.n	8001170 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 800113e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001142:	2101      	movs	r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fc50 	bl	80009ec <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001152:	f7ff fc4b 	bl	80009ec <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e1a2      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d0f1      	beq.n	8001152 <HAL_RCC_OscConfig+0x2a2>
 800116e:	e018      	b.n	80011a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001172:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001174:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 8001176:	2101      	movs	r1, #1
 8001178:	438a      	bics	r2, r1
 800117a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fc36 	bl	80009ec <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001186:	f7ff fc31 	bl	80009ec <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e188      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001198:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119c:	2202      	movs	r2, #2
 800119e:	4013      	ands	r3, r2
 80011a0:	d1f1      	bne.n	8001186 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
 80011aa:	d100      	bne.n	80011ae <HAL_RCC_OscConfig+0x2fe>
 80011ac:	e0c6      	b.n	800133c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ae:	231f      	movs	r3, #31
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2238      	movs	r2, #56	@ 0x38
 80011bc:	4013      	ands	r3, r2
 80011be:	2b20      	cmp	r3, #32
 80011c0:	d11e      	bne.n	8001200 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_RCC_OscConfig+0x32c>)
 80011c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d100      	bne.n	80011ce <HAL_RCC_OscConfig+0x31e>
 80011cc:	e0b6      	b.n	800133c <HAL_RCC_OscConfig+0x48c>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d000      	beq.n	80011d8 <HAL_RCC_OscConfig+0x328>
 80011d6:	e0b1      	b.n	800133c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e166      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	fffeffff 	.word	0xfffeffff
 80011e4:	fffbffff 	.word	0xfffbffff
 80011e8:	ffff80ff 	.word	0xffff80ff
 80011ec:	ffffc7ff 	.word	0xffffc7ff
 80011f0:	00f42400 	.word	0x00f42400
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004
 80011fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001200:	4bac      	ldr	r3, [pc, #688]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001202:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	055b      	lsls	r3, r3, #21
 8001208:	4013      	ands	r3, r2
 800120a:	d101      	bne.n	8001210 <HAL_RCC_OscConfig+0x360>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x362>
 8001210:	2300      	movs	r3, #0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d011      	beq.n	800123a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4ba7      	ldr	r3, [pc, #668]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001218:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800121a:	4ba6      	ldr	r3, [pc, #664]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	0549      	lsls	r1, r1, #21
 8001220:	430a      	orrs	r2, r1
 8001222:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001224:	4ba3      	ldr	r3, [pc, #652]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	055b      	lsls	r3, r3, #21
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001232:	231f      	movs	r3, #31
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800123a:	4b9f      	ldr	r3, [pc, #636]	@ (80014b8 <HAL_RCC_OscConfig+0x608>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4013      	ands	r3, r2
 8001244:	d11a      	bne.n	800127c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001246:	4b9c      	ldr	r3, [pc, #624]	@ (80014b8 <HAL_RCC_OscConfig+0x608>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b9b      	ldr	r3, [pc, #620]	@ (80014b8 <HAL_RCC_OscConfig+0x608>)
 800124c:	2180      	movs	r1, #128	@ 0x80
 800124e:	0049      	lsls	r1, r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001254:	f7ff fbca 	bl	80009ec <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125e:	f7ff fbc5 	bl	80009ec <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e11c      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001270:	4b91      	ldr	r3, [pc, #580]	@ (80014b8 <HAL_RCC_OscConfig+0x608>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4013      	ands	r3, r2
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x3e2>
 8001284:	4b8b      	ldr	r3, [pc, #556]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001286:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001288:	4b8a      	ldr	r3, [pc, #552]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800128a:	2101      	movs	r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001290:	e01c      	b.n	80012cc <HAL_RCC_OscConfig+0x41c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b05      	cmp	r3, #5
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x404>
 800129a:	4b86      	ldr	r3, [pc, #536]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800129c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800129e:	4b85      	ldr	r3, [pc, #532]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80012a0:	2104      	movs	r1, #4
 80012a2:	430a      	orrs	r2, r1
 80012a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012a6:	4b83      	ldr	r3, [pc, #524]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80012a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012aa:	4b82      	ldr	r3, [pc, #520]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	430a      	orrs	r2, r1
 80012b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0x41c>
 80012b4:	4b7f      	ldr	r3, [pc, #508]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80012b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012b8:	4b7e      	ldr	r3, [pc, #504]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	438a      	bics	r2, r1
 80012be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012c0:	4b7c      	ldr	r3, [pc, #496]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80012c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012c4:	4b7b      	ldr	r3, [pc, #492]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80012c6:	2104      	movs	r1, #4
 80012c8:	438a      	bics	r2, r1
 80012ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d014      	beq.n	80012fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fb8a 	bl	80009ec <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012dc:	e009      	b.n	80012f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f7ff fb85 	bl	80009ec <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	4a74      	ldr	r2, [pc, #464]	@ (80014bc <HAL_RCC_OscConfig+0x60c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e0db      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012f2:	4b70      	ldr	r3, [pc, #448]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80012f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x42e>
 80012fc:	e013      	b.n	8001326 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff fb75 	bl	80009ec <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001306:	e009      	b.n	800131c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001308:	f7ff fb70 	bl	80009ec <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	4a6a      	ldr	r2, [pc, #424]	@ (80014bc <HAL_RCC_OscConfig+0x60c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e0c6      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800131c:	4b65      	ldr	r3, [pc, #404]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800131e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001320:	2202      	movs	r2, #2
 8001322:	4013      	ands	r3, r2
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001326:	231f      	movs	r3, #31
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001330:	4b60      	ldr	r3, [pc, #384]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001334:	4b5f      	ldr	r3, [pc, #380]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001336:	4962      	ldr	r1, [pc, #392]	@ (80014c0 <HAL_RCC_OscConfig+0x610>)
 8001338:	400a      	ands	r2, r1
 800133a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x496>
 8001344:	e0b0      	b.n	80014a8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001346:	4b5b      	ldr	r3, [pc, #364]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2238      	movs	r2, #56	@ 0x38
 800134c:	4013      	ands	r3, r2
 800134e:	2b10      	cmp	r3, #16
 8001350:	d100      	bne.n	8001354 <HAL_RCC_OscConfig+0x4a4>
 8001352:	e078      	b.n	8001446 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d153      	bne.n	8001404 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135c:	4b55      	ldr	r3, [pc, #340]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b54      	ldr	r3, [pc, #336]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001362:	4958      	ldr	r1, [pc, #352]	@ (80014c4 <HAL_RCC_OscConfig+0x614>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fb40 	bl	80009ec <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff fb3b 	bl	80009ec <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e092      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001384:	4b4b      	ldr	r3, [pc, #300]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	049b      	lsls	r3, r3, #18
 800138c:	4013      	ands	r3, r2
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001390:	4b48      	ldr	r3, [pc, #288]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a4c      	ldr	r2, [pc, #304]	@ (80014c8 <HAL_RCC_OscConfig+0x618>)
 8001396:	4013      	ands	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1a      	ldr	r2, [r3, #32]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	431a      	orrs	r2, r3
 80013b8:	4b3e      	ldr	r3, [pc, #248]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80013c4:	2180      	movs	r1, #128	@ 0x80
 80013c6:	0449      	lsls	r1, r1, #17
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80013d2:	2180      	movs	r1, #128	@ 0x80
 80013d4:	0549      	lsls	r1, r1, #21
 80013d6:	430a      	orrs	r2, r1
 80013d8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fb07 	bl	80009ec <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fb02 	bl	80009ec <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e059      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f6:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	049b      	lsls	r3, r3, #18
 80013fe:	4013      	ands	r3, r2
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x534>
 8001402:	e051      	b.n	80014a8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800140a:	492e      	ldr	r1, [pc, #184]	@ (80014c4 <HAL_RCC_OscConfig+0x614>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff faec 	bl	80009ec <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fae7 	bl	80009ec <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e03e      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	049b      	lsls	r3, r3, #18
 8001434:	4013      	ands	r3, r2
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 800143e:	4923      	ldr	r1, [pc, #140]	@ (80014cc <HAL_RCC_OscConfig+0x61c>)
 8001440:	400a      	ands	r2, r1
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	e030      	b.n	80014a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e02b      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <HAL_RCC_OscConfig+0x604>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2203      	movs	r2, #3
 800145c:	401a      	ands	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	429a      	cmp	r2, r3
 8001464:	d11e      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2270      	movs	r2, #112	@ 0x70
 800146a:	401a      	ands	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d117      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	23fe      	movs	r3, #254	@ 0xfe
 8001478:	01db      	lsls	r3, r3, #7
 800147a:	401a      	ands	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001480:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d10e      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	23f8      	movs	r3, #248	@ 0xf8
 800148a:	039b      	lsls	r3, r3, #14
 800148c:	401a      	ands	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	0f5b      	lsrs	r3, r3, #29
 800149a:	075a      	lsls	r2, r3, #29
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b008      	add	sp, #32
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40007000 	.word	0x40007000
 80014bc:	00001388 	.word	0x00001388
 80014c0:	efffffff 	.word	0xefffffff
 80014c4:	feffffff 	.word	0xfeffffff
 80014c8:	1fc1808c 	.word	0x1fc1808c
 80014cc:	effefffc 	.word	0xeffefffc

080014d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0e9      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4b76      	ldr	r3, [pc, #472]	@ (80016c0 <HAL_RCC_ClockConfig+0x1f0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2207      	movs	r2, #7
 80014ea:	4013      	ands	r3, r2
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d91e      	bls.n	8001530 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b73      	ldr	r3, [pc, #460]	@ (80016c0 <HAL_RCC_ClockConfig+0x1f0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2207      	movs	r2, #7
 80014f8:	4393      	bics	r3, r2
 80014fa:	0019      	movs	r1, r3
 80014fc:	4b70      	ldr	r3, [pc, #448]	@ (80016c0 <HAL_RCC_ClockConfig+0x1f0>)
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001504:	f7ff fa72 	bl	80009ec <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800150c:	e009      	b.n	8001522 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150e:	f7ff fa6d 	bl	80009ec <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	4a6a      	ldr	r2, [pc, #424]	@ (80016c4 <HAL_RCC_ClockConfig+0x1f4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0ca      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001522:	4b67      	ldr	r3, [pc, #412]	@ (80016c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2207      	movs	r2, #7
 8001528:	4013      	ands	r3, r2
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d1ee      	bne.n	800150e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d015      	beq.n	8001566 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2204      	movs	r2, #4
 8001540:	4013      	ands	r3, r2
 8001542:	d006      	beq.n	8001552 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001544:	4b60      	ldr	r3, [pc, #384]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	4b5f      	ldr	r3, [pc, #380]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 800154a:	21e0      	movs	r1, #224	@ 0xe0
 800154c:	01c9      	lsls	r1, r1, #7
 800154e:	430a      	orrs	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001552:	4b5d      	ldr	r3, [pc, #372]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	4a5d      	ldr	r2, [pc, #372]	@ (80016cc <HAL_RCC_ClockConfig+0x1fc>)
 8001558:	4013      	ands	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	4b59      	ldr	r3, [pc, #356]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	4013      	ands	r3, r2
 800156e:	d057      	beq.n	8001620 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d107      	bne.n	8001588 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001578:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	029b      	lsls	r3, r3, #10
 8001580:	4013      	ands	r3, r2
 8001582:	d12b      	bne.n	80015dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e097      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001590:	4b4d      	ldr	r3, [pc, #308]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	049b      	lsls	r3, r3, #18
 8001598:	4013      	ands	r3, r2
 800159a:	d11f      	bne.n	80015dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e08b      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a8:	4b47      	ldr	r3, [pc, #284]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4013      	ands	r3, r2
 80015b2:	d113      	bne.n	80015dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e07f      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d106      	bne.n	80015ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c0:	4b41      	ldr	r3, [pc, #260]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d108      	bne.n	80015dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e074      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ce:	4b3e      	ldr	r3, [pc, #248]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 80015d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e06d      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015dc:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2207      	movs	r2, #7
 80015e2:	4393      	bics	r3, r2
 80015e4:	0019      	movs	r1, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4b37      	ldr	r3, [pc, #220]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f0:	f7ff f9fc 	bl	80009ec <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f8:	e009      	b.n	800160e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fa:	f7ff f9f7 	bl	80009ec <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a2f      	ldr	r2, [pc, #188]	@ (80016c4 <HAL_RCC_ClockConfig+0x1f4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e054      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2238      	movs	r2, #56	@ 0x38
 8001614:	401a      	ands	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	429a      	cmp	r2, r3
 800161e:	d1ec      	bne.n	80015fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2207      	movs	r2, #7
 8001626:	4013      	ands	r3, r2
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d21e      	bcs.n	800166c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2207      	movs	r2, #7
 8001634:	4393      	bics	r3, r2
 8001636:	0019      	movs	r1, r3
 8001638:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <HAL_RCC_ClockConfig+0x1f0>)
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001640:	f7ff f9d4 	bl	80009ec <HAL_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001648:	e009      	b.n	800165e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164a:	f7ff f9cf 	bl	80009ec <HAL_GetTick>
 800164e:	0002      	movs	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	4a1b      	ldr	r2, [pc, #108]	@ (80016c4 <HAL_RCC_ClockConfig+0x1f4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e02c      	b.n	80016b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2207      	movs	r2, #7
 8001664:	4013      	ands	r3, r2
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2204      	movs	r2, #4
 8001672:	4013      	ands	r3, r2
 8001674:	d009      	beq.n	800168a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <HAL_RCC_ClockConfig+0x200>)
 800167c:	4013      	ands	r3, r2
 800167e:	0019      	movs	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800168a:	f000 f829 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 800168e:	0001      	movs	r1, r0
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	220f      	movs	r2, #15
 8001698:	401a      	ands	r2, r3
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_RCC_ClockConfig+0x204>)
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	58d3      	ldr	r3, [r2, r3]
 80016a0:	221f      	movs	r2, #31
 80016a2:	4013      	ands	r3, r2
 80016a4:	000a      	movs	r2, r1
 80016a6:	40da      	lsrs	r2, r3
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_RCC_ClockConfig+0x208>)
 80016aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_RCC_ClockConfig+0x20c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff f93f 	bl	8000934 <HAL_InitTick>
 80016b6:	0003      	movs	r3, r0
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b004      	add	sp, #16
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40022000 	.word	0x40022000
 80016c4:	00001388 	.word	0x00001388
 80016c8:	40021000 	.word	0x40021000
 80016cc:	fffff0ff 	.word	0xfffff0ff
 80016d0:	ffff8fff 	.word	0xffff8fff
 80016d4:	08001da0 	.word	0x08001da0
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e6:	4b3c      	ldr	r3, [pc, #240]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2238      	movs	r2, #56	@ 0x38
 80016ec:	4013      	ands	r3, r2
 80016ee:	d10f      	bne.n	8001710 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016f0:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0adb      	lsrs	r3, r3, #11
 80016f6:	2207      	movs	r2, #7
 80016f8:	4013      	ands	r3, r2
 80016fa:	2201      	movs	r2, #1
 80016fc:	409a      	lsls	r2, r3
 80016fe:	0013      	movs	r3, r2
 8001700:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	4835      	ldr	r0, [pc, #212]	@ (80017dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001706:	f7fe fcfb 	bl	8000100 <__udivsi3>
 800170a:	0003      	movs	r3, r0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	e05d      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2238      	movs	r2, #56	@ 0x38
 8001716:	4013      	ands	r3, r2
 8001718:	2b08      	cmp	r3, #8
 800171a:	d102      	bne.n	8001722 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800171c:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	e054      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001722:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2238      	movs	r2, #56	@ 0x38
 8001728:	4013      	ands	r3, r2
 800172a:	2b10      	cmp	r3, #16
 800172c:	d138      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2203      	movs	r2, #3
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001738:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	2207      	movs	r2, #7
 8001740:	4013      	ands	r3, r2
 8001742:	3301      	adds	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d10d      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	4824      	ldr	r0, [pc, #144]	@ (80017e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001750:	f7fe fcd6 	bl	8000100 <__udivsi3>
 8001754:	0003      	movs	r3, r0
 8001756:	0019      	movs	r1, r3
 8001758:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	227f      	movs	r2, #127	@ 0x7f
 8001760:	4013      	ands	r3, r2
 8001762:	434b      	muls	r3, r1
 8001764:	617b      	str	r3, [r7, #20]
        break;
 8001766:	e00d      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	481c      	ldr	r0, [pc, #112]	@ (80017dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800176c:	f7fe fcc8 	bl	8000100 <__udivsi3>
 8001770:	0003      	movs	r3, r0
 8001772:	0019      	movs	r1, r3
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	227f      	movs	r2, #127	@ 0x7f
 800177c:	4013      	ands	r3, r2
 800177e:	434b      	muls	r3, r1
 8001780:	617b      	str	r3, [r7, #20]
        break;
 8001782:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0f5b      	lsrs	r3, r3, #29
 800178a:	2207      	movs	r2, #7
 800178c:	4013      	ands	r3, r2
 800178e:	3301      	adds	r3, #1
 8001790:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	6978      	ldr	r0, [r7, #20]
 8001796:	f7fe fcb3 	bl	8000100 <__udivsi3>
 800179a:	0003      	movs	r3, r0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e015      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017a0:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2238      	movs	r2, #56	@ 0x38
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d103      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2238      	movs	r2, #56	@ 0x38
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b18      	cmp	r3, #24
 80017be:	d103      	bne.n	80017c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017c0:	23fa      	movs	r3, #250	@ 0xfa
 80017c2:	01db      	lsls	r3, r3, #7
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	e001      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017cc:	693b      	ldr	r3, [r7, #16]
}
 80017ce:	0018      	movs	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b006      	add	sp, #24
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	40021000 	.word	0x40021000
 80017dc:	00f42400 	.word	0x00f42400
 80017e0:	007a1200 	.word	0x007a1200

080017e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e04a      	b.n	800188c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	223d      	movs	r2, #61	@ 0x3d
 80017fa:	5c9b      	ldrb	r3, [r3, r2]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	223c      	movs	r2, #60	@ 0x3c
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff f809 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	223d      	movs	r2, #61	@ 0x3d
 8001816:	2102      	movs	r1, #2
 8001818:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	0019      	movs	r1, r3
 8001824:	0010      	movs	r0, r2
 8001826:	f000 f90b 	bl	8001a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2248      	movs	r2, #72	@ 0x48
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	223e      	movs	r2, #62	@ 0x3e
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	223f      	movs	r2, #63	@ 0x3f
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2240      	movs	r2, #64	@ 0x40
 8001846:	2101      	movs	r1, #1
 8001848:	5499      	strb	r1, [r3, r2]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2241      	movs	r2, #65	@ 0x41
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2242      	movs	r2, #66	@ 0x42
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2243      	movs	r2, #67	@ 0x43
 800185e:	2101      	movs	r1, #1
 8001860:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2244      	movs	r2, #68	@ 0x44
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2245      	movs	r2, #69	@ 0x45
 800186e:	2101      	movs	r1, #1
 8001870:	5499      	strb	r1, [r3, r2]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2246      	movs	r2, #70	@ 0x46
 8001876:	2101      	movs	r1, #1
 8001878:	5499      	strb	r1, [r3, r2]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2247      	movs	r2, #71	@ 0x47
 800187e:	2101      	movs	r1, #1
 8001880:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	223d      	movs	r2, #61	@ 0x3d
 8001886:	2101      	movs	r1, #1
 8001888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	230f      	movs	r3, #15
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	223c      	movs	r2, #60	@ 0x3c
 80018aa:	5c9b      	ldrb	r3, [r3, r2]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_TIM_ConfigClockSource+0x20>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e0bc      	b.n	8001a2e <HAL_TIM_ConfigClockSource+0x19a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	223c      	movs	r2, #60	@ 0x3c
 80018b8:	2101      	movs	r1, #1
 80018ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	223d      	movs	r2, #61	@ 0x3d
 80018c0:	2102      	movs	r1, #2
 80018c2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001a38 <HAL_TIM_ConfigClockSource+0x1a4>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4a59      	ldr	r2, [pc, #356]	@ (8001a3c <HAL_TIM_ConfigClockSource+0x1a8>)
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	0192      	lsls	r2, r2, #6
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d040      	beq.n	8001972 <HAL_TIM_ConfigClockSource+0xde>
 80018f0:	2280      	movs	r2, #128	@ 0x80
 80018f2:	0192      	lsls	r2, r2, #6
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d900      	bls.n	80018fa <HAL_TIM_ConfigClockSource+0x66>
 80018f8:	e088      	b.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
 80018fa:	2280      	movs	r2, #128	@ 0x80
 80018fc:	0152      	lsls	r2, r2, #5
 80018fe:	4293      	cmp	r3, r2
 8001900:	d100      	bne.n	8001904 <HAL_TIM_ConfigClockSource+0x70>
 8001902:	e088      	b.n	8001a16 <HAL_TIM_ConfigClockSource+0x182>
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	0152      	lsls	r2, r2, #5
 8001908:	4293      	cmp	r3, r2
 800190a:	d900      	bls.n	800190e <HAL_TIM_ConfigClockSource+0x7a>
 800190c:	e07e      	b.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
 800190e:	2b70      	cmp	r3, #112	@ 0x70
 8001910:	d018      	beq.n	8001944 <HAL_TIM_ConfigClockSource+0xb0>
 8001912:	d900      	bls.n	8001916 <HAL_TIM_ConfigClockSource+0x82>
 8001914:	e07a      	b.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
 8001916:	2b60      	cmp	r3, #96	@ 0x60
 8001918:	d04f      	beq.n	80019ba <HAL_TIM_ConfigClockSource+0x126>
 800191a:	d900      	bls.n	800191e <HAL_TIM_ConfigClockSource+0x8a>
 800191c:	e076      	b.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
 800191e:	2b50      	cmp	r3, #80	@ 0x50
 8001920:	d03b      	beq.n	800199a <HAL_TIM_ConfigClockSource+0x106>
 8001922:	d900      	bls.n	8001926 <HAL_TIM_ConfigClockSource+0x92>
 8001924:	e072      	b.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
 8001926:	2b40      	cmp	r3, #64	@ 0x40
 8001928:	d057      	beq.n	80019da <HAL_TIM_ConfigClockSource+0x146>
 800192a:	d900      	bls.n	800192e <HAL_TIM_ConfigClockSource+0x9a>
 800192c:	e06e      	b.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
 800192e:	2b30      	cmp	r3, #48	@ 0x30
 8001930:	d063      	beq.n	80019fa <HAL_TIM_ConfigClockSource+0x166>
 8001932:	d86b      	bhi.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
 8001934:	2b20      	cmp	r3, #32
 8001936:	d060      	beq.n	80019fa <HAL_TIM_ConfigClockSource+0x166>
 8001938:	d868      	bhi.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d05d      	beq.n	80019fa <HAL_TIM_ConfigClockSource+0x166>
 800193e:	2b10      	cmp	r3, #16
 8001940:	d05b      	beq.n	80019fa <HAL_TIM_ConfigClockSource+0x166>
 8001942:	e063      	b.n	8001a0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001954:	f000 f96a 	bl	8001c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2277      	movs	r2, #119	@ 0x77
 8001964:	4313      	orrs	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	609a      	str	r2, [r3, #8]
      break;
 8001970:	e052      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001982:	f000 f953 	bl	8001c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2180      	movs	r1, #128	@ 0x80
 8001992:	01c9      	lsls	r1, r1, #7
 8001994:	430a      	orrs	r2, r1
 8001996:	609a      	str	r2, [r3, #8]
      break;
 8001998:	e03e      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019a6:	001a      	movs	r2, r3
 80019a8:	f000 f8c4 	bl	8001b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2150      	movs	r1, #80	@ 0x50
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 f91e 	bl	8001bf4 <TIM_ITRx_SetConfig>
      break;
 80019b8:	e02e      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019c6:	001a      	movs	r2, r3
 80019c8:	f000 f8e2 	bl	8001b90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2160      	movs	r1, #96	@ 0x60
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f90e 	bl	8001bf4 <TIM_ITRx_SetConfig>
      break;
 80019d8:	e01e      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019e6:	001a      	movs	r2, r3
 80019e8:	f000 f8a4 	bl	8001b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2140      	movs	r1, #64	@ 0x40
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 f8fe 	bl	8001bf4 <TIM_ITRx_SetConfig>
      break;
 80019f8:	e00e      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0019      	movs	r1, r3
 8001a04:	0010      	movs	r0, r2
 8001a06:	f000 f8f5 	bl	8001bf4 <TIM_ITRx_SetConfig>
      break;
 8001a0a:	e005      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
      break;
 8001a14:	e000      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001a16:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	223d      	movs	r2, #61	@ 0x3d
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	223c      	movs	r2, #60	@ 0x3c
 8001a24:	2100      	movs	r1, #0
 8001a26:	5499      	strb	r1, [r3, r2]

  return status;
 8001a28:	230f      	movs	r3, #15
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
}
 8001a2e:	0018      	movs	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	ffceff88 	.word	0xffceff88
 8001a3c:	ffff00ff 	.word	0xffff00ff

08001a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a32      	ldr	r2, [pc, #200]	@ (8001b1c <TIM_Base_SetConfig+0xdc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d003      	beq.n	8001a60 <TIM_Base_SetConfig+0x20>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a31      	ldr	r2, [pc, #196]	@ (8001b20 <TIM_Base_SetConfig+0xe0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d108      	bne.n	8001a72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2270      	movs	r2, #112	@ 0x70
 8001a64:	4393      	bics	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a29      	ldr	r2, [pc, #164]	@ (8001b1c <TIM_Base_SetConfig+0xdc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00f      	beq.n	8001a9a <TIM_Base_SetConfig+0x5a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a28      	ldr	r2, [pc, #160]	@ (8001b20 <TIM_Base_SetConfig+0xe0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00b      	beq.n	8001a9a <TIM_Base_SetConfig+0x5a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a27      	ldr	r2, [pc, #156]	@ (8001b24 <TIM_Base_SetConfig+0xe4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <TIM_Base_SetConfig+0x5a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a26      	ldr	r2, [pc, #152]	@ (8001b28 <TIM_Base_SetConfig+0xe8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d003      	beq.n	8001a9a <TIM_Base_SetConfig+0x5a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a25      	ldr	r2, [pc, #148]	@ (8001b2c <TIM_Base_SetConfig+0xec>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d108      	bne.n	8001aac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4a24      	ldr	r2, [pc, #144]	@ (8001b30 <TIM_Base_SetConfig+0xf0>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2280      	movs	r2, #128	@ 0x80
 8001ab0:	4393      	bics	r3, r2
 8001ab2:	001a      	movs	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a11      	ldr	r2, [pc, #68]	@ (8001b1c <TIM_Base_SetConfig+0xdc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <TIM_Base_SetConfig+0xaa>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <TIM_Base_SetConfig+0xe8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d003      	beq.n	8001aea <TIM_Base_SetConfig+0xaa>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <TIM_Base_SetConfig+0xec>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d103      	bne.n	8001af2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]
  }
}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	40012c00 	.word	0x40012c00
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40002000 	.word	0x40002000
 8001b28:	40014400 	.word	0x40014400
 8001b2c:	40014800 	.word	0x40014800
 8001b30:	fffffcff 	.word	0xfffffcff

08001b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	001a      	movs	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	22f0      	movs	r2, #240	@ 0xf0
 8001b5e:	4393      	bics	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	220a      	movs	r2, #10
 8001b70:	4393      	bics	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	621a      	str	r2, [r3, #32]
}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b006      	add	sp, #24
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	4393      	bics	r3, r2
 8001baa:	001a      	movs	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <TIM_TI2_ConfigInputStage+0x60>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	031b      	lsls	r3, r3, #12
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	22a0      	movs	r2, #160	@ 0xa0
 8001bcc:	4393      	bics	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	621a      	str	r2, [r3, #32]
}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b006      	add	sp, #24
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	ffff0fff 	.word	0xffff0fff

08001bf4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4a08      	ldr	r2, [pc, #32]	@ (8001c28 <TIM_ITRx_SetConfig+0x34>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	2207      	movs	r2, #7
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	609a      	str	r2, [r3, #8]
}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b004      	add	sp, #16
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	ffcfff8f 	.word	0xffcfff8f

08001c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <TIM_ETR_SetConfig+0x3c>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	021a      	lsls	r2, r3, #8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	609a      	str	r2, [r3, #8]
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b006      	add	sp, #24
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	ffff00ff 	.word	0xffff00ff

08001c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	223c      	movs	r2, #60	@ 0x3c
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e04a      	b.n	8001d1a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	223c      	movs	r2, #60	@ 0x3c
 8001c88:	2101      	movs	r1, #1
 8001c8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	223d      	movs	r2, #61	@ 0x3d
 8001c90:	2102      	movs	r1, #2
 8001c92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d108      	bne.n	8001cc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2270      	movs	r2, #112	@ 0x70
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d004      	beq.n	8001cee <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10c      	bne.n	8001d08 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2280      	movs	r2, #128	@ 0x80
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	223d      	movs	r2, #61	@ 0x3d
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	223c      	movs	r2, #60	@ 0x3c
 8001d14:	2100      	movs	r1, #0
 8001d16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	ff0fffff 	.word	0xff0fffff
 8001d2c:	40000400 	.word	0x40000400

08001d30 <memset>:
 8001d30:	0003      	movs	r3, r0
 8001d32:	1882      	adds	r2, r0, r2
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d100      	bne.n	8001d3a <memset+0xa>
 8001d38:	4770      	bx	lr
 8001d3a:	7019      	strb	r1, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	e7f9      	b.n	8001d34 <memset+0x4>

08001d40 <__libc_init_array>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	2600      	movs	r6, #0
 8001d44:	4c0c      	ldr	r4, [pc, #48]	@ (8001d78 <__libc_init_array+0x38>)
 8001d46:	4d0d      	ldr	r5, [pc, #52]	@ (8001d7c <__libc_init_array+0x3c>)
 8001d48:	1b64      	subs	r4, r4, r5
 8001d4a:	10a4      	asrs	r4, r4, #2
 8001d4c:	42a6      	cmp	r6, r4
 8001d4e:	d109      	bne.n	8001d64 <__libc_init_array+0x24>
 8001d50:	2600      	movs	r6, #0
 8001d52:	f000 f819 	bl	8001d88 <_init>
 8001d56:	4c0a      	ldr	r4, [pc, #40]	@ (8001d80 <__libc_init_array+0x40>)
 8001d58:	4d0a      	ldr	r5, [pc, #40]	@ (8001d84 <__libc_init_array+0x44>)
 8001d5a:	1b64      	subs	r4, r4, r5
 8001d5c:	10a4      	asrs	r4, r4, #2
 8001d5e:	42a6      	cmp	r6, r4
 8001d60:	d105      	bne.n	8001d6e <__libc_init_array+0x2e>
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
 8001d64:	00b3      	lsls	r3, r6, #2
 8001d66:	58eb      	ldr	r3, [r5, r3]
 8001d68:	4798      	blx	r3
 8001d6a:	3601      	adds	r6, #1
 8001d6c:	e7ee      	b.n	8001d4c <__libc_init_array+0xc>
 8001d6e:	00b3      	lsls	r3, r6, #2
 8001d70:	58eb      	ldr	r3, [r5, r3]
 8001d72:	4798      	blx	r3
 8001d74:	3601      	adds	r6, #1
 8001d76:	e7f2      	b.n	8001d5e <__libc_init_array+0x1e>
 8001d78:	08001de0 	.word	0x08001de0
 8001d7c:	08001de0 	.word	0x08001de0
 8001d80:	08001de4 	.word	0x08001de4
 8001d84:	08001de0 	.word	0x08001de0

08001d88 <_init>:
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d8e:	bc08      	pop	{r3}
 8001d90:	469e      	mov	lr, r3
 8001d92:	4770      	bx	lr

08001d94 <_fini>:
 8001d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9a:	bc08      	pop	{r3}
 8001d9c:	469e      	mov	lr, r3
 8001d9e:	4770      	bx	lr
